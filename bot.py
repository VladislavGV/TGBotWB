#!/usr/bin/env python3
# coding: utf-8
"""
Telegram bot –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: –ø—Ä–æ–≤–µ—Ä–∫—É payload, –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞,
health endpoint –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ (Render), —Å—Ç–∞–±–∏–ª—å–Ω—ã–π polling —Å –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç–æ–º.
"""

import os
import re
import asyncio
import logging
from typing import Optional

from aiohttp import web
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    LabeledPrice,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    PreCheckoutQueryHandler,
)

# ---------- Logging ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ---------- Conversation states ----------
SELECTING_ACTION, GETTING_PHONE, GETTING_PLATFORM = range(3)

# ---------- Environment & config ----------
# Required: TOKEN
TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    logger.error("ENV TOKEN not set. Exiting.")
    raise SystemExit("TOKEN env var is required (Telegram bot token).")

# Optional but recommended: ADMIN_CHAT_ID (int)
ADMIN_CHAT_ID_RAW = os.environ.get("ADMIN_CHAT_ID")
ADMIN_CHAT_ID: Optional[int] = None
if ADMIN_CHAT_ID_RAW:
    try:
        ADMIN_CHAT_ID = int(ADMIN_CHAT_ID_RAW)
    except ValueError:
        logger.warning("ADMIN_CHAT_ID is set but not an integer; admin notifications disabled.")
        ADMIN_CHAT_ID = None

# Provider token for payments (–ÆKassa)
YKASSA_TOKEN = os.environ.get("YKASSA_TOKEN")
if not YKASSA_TOKEN:
    logger.warning("YKASSA_TOKEN not set. Payment functionality will be disabled.")

# Health / web server port (Render provides PORT)
PORT = int(os.environ.get("PORT", "8080"))

# Optional whitelist (comma-separated ids) ‚Äî –µ—Å–ª–∏ –Ω–∞–¥–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø
WHITELIST_RAW = os.environ.get("WHITELIST")  # e.g. "12345,67890"
WHITELIST = set()
if WHITELIST_RAW:
    for s in WHITELIST_RAW.split(","):
        s = s.strip()
        if s:
            try:
                WHITELIST.add(int(s))
            except ValueError:
                logger.warning("Invalid ID in WHITELIST: %s", s)

# Price constants (in kopecks)
PRICE_SINGLE = 10000  # 100.00 RUB
PRICE_12 = 50000      # 500.00 RUB

# Allowed payloads
VALID_PAYLOADS = {"1_consultation", "12_consultations"}

# Phone validation regex (international-ish)
PHONE_RE = re.compile(r"^\+?\d{7,15}$")

# ---------- Utility helpers ----------
def format_rub(kopecks: int) -> str:
    return f"{kopecks/100:.2f} —Ä—É–±."

# ---------- Admin notification ----------
async def send_admin_notification(
    context: ContextTypes.DEFAULT_TYPE,
    user_data: dict,
    payment_info,
    user_id: int,
    username: Optional[str],
) -> None:
    if not ADMIN_CHAT_ID:
        logger.info("ADMIN_CHAT_ID not configured ‚Äî skipping admin notification.")
        return

    try:
        consultation_type = user_data.get("consultation_type", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        phone = user_data.get("phone", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        platform = user_data.get("platform", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        amount = payment_info.total_amount if getattr(payment_info, "total_amount", None) is not None else 0
        provider_charge_id = getattr(payment_info, "provider_payment_charge_id", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        admin_message = (
            "üõéÔ∏è *–ù–û–í–´–ô –ó–ê–ö–ê–ó*\n\n"
            f"‚úÖ *–£—Å–ª—É–≥–∞:* {consultation_type}\n"
            f"üí∞ *–°—É–º–º–∞:* {format_rub(amount)}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
            f"üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {platform}\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'} (ID: {user_id})\n"
            f"üí≥ *ID –ø–ª–∞—Ç–µ–∂–∞:* {provider_charge_id}"
        )

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            parse_mode=ParseMode.MARKDOWN,
        )
        logger.info("Admin notified (chat_id=%s).", ADMIN_CHAT_ID)

    except Exception as exc:
        logger.exception("Failed to send admin notification: %s", exc)

# ---------- Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message is None:
        return ConversationHandler.END

    user_id = update.effective_user.id
    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω whitelist, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if WHITELIST and user_id not in WHITELIST:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        logger.info("User %s blocked by whitelist.", user_id)
        return ConversationHandler.END

    description = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n\n"
        "üéØ –ù–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∑–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ª—é–¥–µ–π.\n"
        "üíº –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö IT-–ø—Ä–æ–±–ª–µ–º –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n"
        "‚Ä¢ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 100 —Ä—É–±.\n"
        "‚Ä¢ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: 500 —Ä—É–±. (–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ 700 —Ä—É–±! üéâ)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )

    reply_keyboard = [["–ö—É–ø–∏—Ç—å 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "–ö—É–ø–∏—Ç—å 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"]]
    await update.message.reply_text(
        description,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return SELECTING_ACTION

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message is None:
        return ConversationHandler.END

    text = update.message.text or ""
    context.user_data.setdefault("consultation_type", text)

    if text == "–ö—É–ø–∏—Ç—å 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        context.user_data["price"] = PRICE_SINGLE
        await update.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å: 100 —Ä—É–±.\n\n"
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):",
            reply_markup=ReplyKeyboardRemove(),
        )
    elif text == "–ö—É–ø–∏—Ç—å 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π":
        context.user_data["price"] = PRICE_12
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç –∏–∑ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å–æ —Å–∫–∏–¥–∫–æ–π. "
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500 —Ä—É–±. (–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ 700 —Ä—É–±! üéâ)\n\n"
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):",
            reply_markup=ReplyKeyboardRemove(),
        )
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return ConversationHandler.END

    return GETTING_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message is None:
        return ConversationHandler.END

    phone = (update.message.text or "").strip()
    if not PHONE_RE.match(phone):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")
        return GETTING_PHONE

    context.user_data["phone"] = phone

    platform_keyboard = [["iOS", "Android"]]
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        reply_markup=ReplyKeyboardMarkup(platform_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return GETTING_PLATFORM

async def get_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message is None:
        return ConversationHandler.END

    platform = update.message.text or ""
    context.user_data["platform"] = platform

    consultation_type = context.user_data.get("consultation_type", "")
    phone = context.user_data.get("phone", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –ÆKassa
    if not YKASSA_TOKEN:
        await update.message.reply_text(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—á–µ—Ç–∞
    if consultation_type == "–ö—É–ø–∏—Ç—å 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        title = "1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
        description = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∑–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ª—é–¥–µ–π"
        payload = "1_consultation"
        prices = [LabeledPrice(label="1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", amount=PRICE_SINGLE)]
    else:
        title = "12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
        description = "–ü–∞–∫–µ—Ç –∏–∑ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∑–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ª—é–¥–µ–π"
        payload = "12_consultations"
        prices = [LabeledPrice(label="12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π", amount=PRICE_12)]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ payload (payload –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –¥–ª–∏–Ω–µ —É Telegram)
    # –§–æ—Ä–º–∞—Ç: "<payload>|<phone>|<platform>"
    payload_full = f"{payload}|{phone}|{platform}"

    try:
        await context.bot.send_invoice(
            chat_id=update.effective_chat.id,
            title=title,
            description=description,
            payload=payload_full,
            provider_token=YKASSA_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="consultation_order",
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
        )
        logger.info("Invoice sent to chat %s (payload=%s)", update.effective_chat.id, payload_full)
    except Exception as e:
        logger.exception("Error sending invoice: %s", e)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    return ConversationHandler.END

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.pre_checkout_query
    if query is None:
        return

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–º–µ–Ω—ã payload
    try:
        invoice_payload = (query.invoice_payload or "").split("|")[0]
        if invoice_payload not in VALID_PAYLOADS:
            await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–µ–π–ª–æ–∞–¥ –ø–ª–∞—Ç–µ–∂–∞.")
            logger.warning("PreCheckout rejected: invalid payload %s", invoice_payload)
            return

        await query.answer(ok=True)
    except Exception as exc:
        logger.exception("Error in precheckout_callback: %s", exc)
        try:
            await query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        except Exception:
            pass

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message is None:
        return

    payment_info = update.message.successful_payment
    if payment_info is None:
        return

    # payload format: "<payload>|<phone>|<platform>"
    payload_parts = (payment_info.invoice_payload or "").split("|")
    base = payload_parts[0] if len(payload_parts) > 0 else ""
    consultation_type = "1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if base == "1_consultation" else "12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"
    phone = payload_parts[1] if len(payload_parts) > 1 else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    platform = payload_parts[2] if len(payload_parts) > 2 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
    context.user_data.setdefault("consultation_type", consultation_type)
    context.user_data.setdefault("phone", phone)
    context.user_data.setdefault("platform", platform)

    # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n\n"
        f"–£—Å–ª—É–≥–∞: {consultation_type}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {format_rub(payment_info.total_amount)}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n\n"
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! ü§ù",
        reply_markup=ReplyKeyboardRemove(),
    )

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    user_id = update.effective_user.id
    username = update.effective_user.username
    await send_admin_notification(context, context.user_data, payment_info, user_id, username)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        await update.message.reply_text(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é.",
            reply_markup=ReplyKeyboardRemove(),
        )
    return ConversationHandler.END

# ---------- App creation ----------
def build_application() -> Application:
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_ACTION: [
                MessageHandler(filters.Regex("^(–ö—É–ø–∏—Ç—å 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é|–ö—É–ø–∏—Ç—å 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π)$"), handle_action)
            ],
            GETTING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            GETTING_PLATFORM: [MessageHandler(filters.Regex("^(iOS|Android)$"), get_platform)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="purchase_conversation",
        persistent=False,
    )

    application.add_handler(conv_handler)
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

    return application

# ---------- Web health server (aiohttp) ----------
async def health_handler(request):
    return web.Response(text="OK")

def create_web_app():
    app = web.Application()
    app.router.add_get("/health", health_handler)
    return app

# ---------- Runner ----------
async def run_bot_and_web() -> None:
    application = build_application()

    # Strategy: –∑–∞–ø—É—Å–∫ polling –≤ —Ñ–æ–Ω–µ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π aiohttp-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health.
    # run_polling ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞, –µ—ë –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–¥–∞—á—É.
    polling_task = None
    backoff_seconds = 1

    # aiohttp web app
    web_app = create_web_app()
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)

    try:
        await site.start()
        logger.info("Health server started on port %s", PORT)

        # –¶–∏–∫–ª –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ polling —Å backoff –Ω–∞ –æ—à–∏–±–∫–∞
        while True:
            try:
                logger.info("Starting Telegram polling...")
                polling_task = asyncio.create_task(application.run_polling())
                await polling_task  # –¥–æ–∂–¥—ë–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–æ–Ω–æ –æ–±—ã—á–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç)
                logger.warning("Polling finished gracefully ‚Äî restarting.")
                backoff_seconds = 1  # —Å–±—Ä–æ—Å backoff –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            except asyncio.CancelledError:
                logger.info("Polling task cancelled; breaking.")
                break
            except Exception as exc:
                logger.exception("Polling crashed with exception: %s", exc)
                # –ñ–¥—ë–º —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 300 —Å–µ–∫—É–Ω–¥
                logger.info("Restarting polling after %s seconds...", backoff_seconds)
                await asyncio.sleep(backoff_seconds)
                backoff_seconds = min(backoff_seconds * 2, 300)
                continue

    finally:
        logger.info("Shutting down bot and web server...")
        try:
            if polling_task and not polling_task.done():
                polling_task.cancel()
                await asyncio.sleep(0.1)
        except Exception:
            pass
        try:
            await application.shutdown()
            await application.stop()
        except Exception:
            pass
        try:
            await runner.cleanup()
        except Exception:
            pass

# ---------- Entrypoint ----------
def main():
    logger.info("Bot starting...")
    try:
        asyncio.run(run_bot_and_web())
    except KeyboardInterrupt:
        logger.info("Interrupted by user (KeyboardInterrupt)")
    except Exception as e:
        logger.exception("Fatal error in main: %s", e)

if __name__ == "__main__":
    main()
