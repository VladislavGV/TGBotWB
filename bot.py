import os
import logging
from aiohttp import web
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    filters,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("TOKEN")
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", 0))
YKASSA_TOKEN = os.environ.get("YKASSA_TOKEN")

SELECTING_PACKAGE, GETTING_PHONE, GETTING_PLATFORM = range(3)

# --- Health endpoint –¥–ª—è Render ---
async def health(request):
    return web.Response(text="OK", status=200)

# --- Start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí° 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî 100 ‚ÇΩ", callback_data="1")],
        [InlineKeyboardButton("üì¶ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π ‚Äî 500 ‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 700 ‚ÇΩ!)", callback_data="12")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!*\n\n"
        "üéØ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ IT –ø—Ä–æ–±–ª–µ–º–∞–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏.\n\n"
        "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:*\n"
        "‚Ä¢ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 100 ‚ÇΩ\n"
        "‚Ä¢ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: 500 ‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 700 ‚ÇΩ!)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    return SELECTING_PACKAGE

# --- –í—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ ---
async def package_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    package = query.data
    context.user_data['package'] = package
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return GETTING_PHONE

# --- –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    context.user_data['phone'] = phone

    keyboard = [[InlineKeyboardButton("iOS", callback_data="iOS")],
                [InlineKeyboardButton("Android", callback_data="Android")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", reply_markup=reply_markup)
    return GETTING_PLATFORM

# --- –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—á—ë—Ç–∞ ---
async def get_platform(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    platform = query.data
    context.user_data['platform'] = platform

    package = context.user_data['package']
    phone = context.user_data['phone']

    if package == "1":
        title = "1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
        prices = [LabeledPrice("1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", 10000)]
        payload = f"1|{phone}|{platform}"
    else:
        title = "12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
        prices = [LabeledPrice("12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π", 50000)]
        payload = f"12|{phone}|{platform}"

    await query.message.reply_invoice(
        title=title,
        description=f"IT –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ({package})",
        payload=payload,
        provider_token=YKASSA_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="consultation_order",
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False
    )
    return ConversationHandler.END

# --- Precheckout ---
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

# --- –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ---
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    payload_parts = payment.invoice_payload.split("|")
    package = "1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if payload_parts[0] == "1" else "12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"
    phone = payload_parts[1]
    platform = payload_parts[2]

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    text = (
        f"‚úÖ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n"
        f"üí° *–ü–∞–∫–µ—Ç:* {package}\n"
        f"üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {platform}\n"
        f"üí∞ *–°—É–º–º–∞:* {payment.total_amount / 100} ‚ÇΩ\n\n"
        "üìù –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

    # –ê–¥–º–∏–Ω
    if ADMIN_CHAT_ID:
        admin_text = (
            f"üõéÔ∏è *–ù–û–í–´–ô –ó–ê–ö–ê–ó*\n\n"
            f"üí° *–ü–∞–∫–µ—Ç:* {package}\n"
            f"üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {platform}\n"
            f"üí∞ *–°—É–º–º–∞:* {payment.total_amount / 100} ‚ÇΩ\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} (ID: {update.effective_user.id})\n"
            f"üí≥ *ID –ø–ª–∞—Ç–µ–∂–∞:* {payment.provider_payment_charge_id}"
        )
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text, parse_mode="Markdown")

# --- –û—Ç–º–µ–Ω–∞ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=None)
    return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_PACKAGE: [CallbackQueryHandler(package_selection)],
            GETTING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            GETTING_PLATFORM: [CallbackQueryHandler(get_platform)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    # Webhook –¥–ª—è Render
    from aiohttp import web
    web_app = web.Application()
    web_app.router.add_get("/health", health)
    web_app.router.add_post(f"/webhook/{TOKEN}", app.bot.webhook_handler)
    web.run_app(web_app, port=int(os.environ.get("PORT", 8080)))

if __name__ == "__main__":
    main()
