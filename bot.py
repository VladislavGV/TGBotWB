import os
import logging
import asyncio
from aiohttp import web
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, LabeledPrice
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    PreCheckoutQueryHandler,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID")
YKASSA_TOKEN = os.environ.get("YKASSA_TOKEN")
TOKEN = os.environ.get("TOKEN")

SELECTING_ACTION, GETTING_PHONE, GETTING_PLATFORM = range(3)


# ---------------- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ ---------------- #

async def send_admin_notification(context: ContextTypes.DEFAULT_TYPE, user_data: dict, payment_info, user_id: int, username: str):
    if not ADMIN_CHAT_ID:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    try:
        consultation_type = user_data.get("consultation_type", "")
        phone = user_data.get("phone", "")
        platform = user_data.get("platform", "")

        admin_message = (
            "üõéÔ∏è *–ù–û–í–´–ô –ó–ê–ö–ê–ó*\n\n"
            f"‚úÖ *–£—Å–ª—É–≥–∞:* {consultation_type}\n"
            f"üí∞ *–°—É–º–º–∞:* {payment_info.total_amount / 100} —Ä—É–±.\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
            f"üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {platform}\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'} (ID: {user_id})\n"
            f"üí≥ *ID –ø–ª–∞—Ç–µ–∂–∞:* {payment_info.provider_payment_charge_id}"
        )

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID, text=admin_message, parse_mode="Markdown"
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_CHAT_ID}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message is None:
        return ConversationHandler.END

    description = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n"
        "‚Ä¢ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 100 —Ä—É–±.\n"
        "‚Ä¢ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: 500 —Ä—É–±. (—ç–∫–æ–Ω–æ–º–∏—è 700 —Ä—É–± üéâ)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )

    reply_keyboard = [["–ö—É–ø–∏—Ç—å 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "–ö—É–ø–∏—Ç—å 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"]]
    await update.message.reply_text(
        description,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return SELECTING_ACTION


async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    context.user_data["consultation_type"] = text

    if text == "–ö—É–ø–∏—Ç—å 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        context.user_data["price"] = 100
        await update.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –°—Ç–æ–∏–º–æ—Å—Ç—å: 100 —Ä—É–±.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=ReplyKeyboardRemove(),
        )
    elif text == "–ö—É–ø–∏—Ç—å 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π":
        context.user_data["price"] = 500
        await update.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç –∏–∑ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∑–∞ 500 —Ä—É–± (—Å–∫–∏–¥–∫–∞ 700 —Ä—É–± üéâ).\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=ReplyKeyboardRemove(),
        )
    return GETTING_PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    phone = update.message.text
    if not phone or len(phone) < 5:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return GETTING_PHONE

    context.user_data["phone"] = phone
    platform_keyboard = [["iOS", "Android"]]
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        reply_markup=ReplyKeyboardMarkup(
            platform_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return GETTING_PLATFORM


async def get_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    platform = update.message.text
    context.user_data["platform"] = platform

    consultation_type = context.user_data.get("consultation_type", "")
    phone = context.user_data.get("phone", "")

    if not YKASSA_TOKEN:
        await update.message.reply_text(
            "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    if consultation_type == "–ö—É–ø–∏—Ç—å 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        title = "1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
        description = "–†–∞–∑–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
        payload = "1_consultation"
        prices = [LabeledPrice(label="1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", amount=10000)]
    else:
        title = "12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
        description = "–ü–∞–∫–µ—Ç –∏–∑ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
        payload = "12_consultations"
        prices = [LabeledPrice(label="12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π", amount=50000)]

    payload += f"|{phone}|{platform}"

    try:
        await context.bot.send_invoice(
            chat_id=update.effective_chat.id,
            title=title,
            description=description,
            payload=payload,
            provider_token=YKASSA_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="consultation_order",
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
        )
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END



async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)


async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment_info = update.message.successful_payment
    payload_parts = payment_info.invoice_payload.split("|")
    consultation_type = "1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if payload_parts[0] == "1_consultation" else "12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"
    phone = payload_parts[1] if len(payload_parts) > 1 else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    platform = payload_parts[2] if len(payload_parts) > 2 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    context.user_data.update(
        {"consultation_type": consultation_type, "phone": phone, "platform": platform}
    )

    await update.message.reply_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"–£—Å–ª—É–≥–∞: {consultation_type}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {payment_info.total_amount / 100} —Ä—É–±.\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n\n"
        "–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ü§ù",
        reply_markup=ReplyKeyboardRemove(),
    )

    user_id = update.effective_user.id
    username = update.effective_user.username
    await send_admin_notification(context, context.user_data, payment_info, user_id, username)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


# ---------------- Health Endpoint ---------------- #

async def health(request):
    return web.json_response({"status": "ok"})


# ---------------- Main ---------------- #

async def main():
    if not TOKEN:
        logger.error("TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_ACTION: [
                MessageHandler(
                    filters.Regex("^(–ö—É–ø–∏—Ç—å 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é|–ö—É–ø–∏—Ç—å 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π)$"),
                    handle_action,
                )
            ],
            GETTING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            GETTING_PLATFORM: [
                MessageHandler(filters.Regex("^(iOS|Android)$"), get_platform)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

    # aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck
    app = web.Application()
    app.router.add_get("/health", health)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()

    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —ç—Ç–æ–º –∂–µ loop
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    logger.info("‚úÖ –ë–æ—Ç –∏ health —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω—ã!")

    # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())
