import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler, CallbackQueryHandler
from bot_logic import handle_buy, handle_support, handle_platform, handle_phone

BOT_TOKEN = "8286347628:AAGn1jX3jB-gnVESPRZlmEeoWg9IFhRnw6M"
ADMIN_CHAT_ID = 1082958705
YUKASSA_TOKEN = "test_a-AT5Q8y-jV4fkRKCOYJLXkeKeg-wJzs0L-oN7udAzo"

BUY_AMOUNT, PHONE, PLATFORM = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard_main = ReplyKeyboardMarkup([
    [KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∑–∞ 100‚ÇΩ"), KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∑–∞ 500‚ÇΩ")],
    [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")]
], resize_keyboard=True)

keyboard_platform = ReplyKeyboardMarkup([
    [KeyboardButton("üì± iOS"), KeyboardButton("ü§ñ Android")]
], resize_keyboard=True)

keyboard_phone = ReplyKeyboardMarkup([
    [KeyboardButton("üì≤ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n\n"
        "üéØ –ù–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∑–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ª—é–¥–µ–π.\n"
        "üíº –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö IT-–ø—Ä–æ–±–ª–µ–º –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n"
        "‚Ä¢ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 100 —Ä—É–±.\n"
        "‚Ä¢ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: 500 —Ä—É–±. (–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ 700 —Ä—É–±! üéâ)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )
    await update.message.reply_text(welcome_text, reply_markup=keyboard_main)

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_support(update, context, ADMIN_CHAT_ID)

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = 100 if "100" in update.message.text else 500
    context.user_data['amount'] = amount
    await update.message.reply_text("üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard_phone)
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    if contact is None:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return PHONE
    context.user_data['phone'] = contact.phone_number
    context.user_data['user_id'] = update.message.from_user.id
    await update.message.reply_text("üì± –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard_platform)
    return PLATFORM

async def platform(update: Update, context: ContextTypes.DEFAULT_TYPE):
    platform_choice = update.message.text
    context.user_data['platform'] = platform_choice
    await handle_buy(update, context, ADMIN_CHAT_ID, YUKASSA_TOKEN)
    return ConversationHandler.END

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üí≥ –ö—É–ø–∏—Ç—å –∑–∞ 100‚ÇΩ|üí≥ –ö—É–ø–∏—Ç—å –∑–∞ 500‚ÇΩ"), buy)],
        states={
            PHONE: [MessageHandler(filters.CONTACT, phone)],
            PLATFORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, platform)]
        },
        fallbacks=[MessageHandler(filters.Regex("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"), support)]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"), support))

    port = int(os.environ.get("PORT", 8000))
    application.run_polling(poll_interval=1, allowed_updates=None)

if __name__ == "__main__":
    main()
