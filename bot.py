# bot.py
import logging
from fastapi import FastAPI, Request
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --------------------
TELEGRAM_TOKEN = "8286347628:AAGn1jX3jB-gnVESPRZlmEeoWg9IFhRnw6M"
ADMIN_CHAT_ID = 1082958705
YOOKASSA_TOKEN = "test_a-AT5Q8y-jV4fkRKCOYJLXkeKeg-wJzs0L-oN7udAzo"

# -------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# -------------------- FastAPI --------------------
app = FastAPI()
application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ --------------------
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 100‚ÇΩ"), KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 500‚ÇΩ")],
        [KeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        [KeyboardButton("–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")]
    ],
    resize_keyboard=True
)

# -------------------- –ö–æ–º–∞–Ω–¥—ã --------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n\n"
        "üéØ –ù–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∑–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ª—é–¥–µ–π.\n"
        "üíº –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö IT-–ø—Ä–æ–±–ª–µ–º –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n"
        "‚Ä¢ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 100 —Ä—É–±.\n"
        "‚Ä¢ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: 500 —Ä—É–±. (–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ 700 —Ä—É–±! üéâ)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )
    await update.message.reply_text(welcome_text, reply_markup=keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    first_name = update.message.from_user.first_name
    contact = update.message.contact.phone_number if update.message.contact else None

    if text == "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        await application.bot.send_message(
            chat_id=user_id,
            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        await application.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({first_name}, ID: {user_id}) —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    elif text in ["–û–ø–ª–∞—Ç–∏—Ç—å 100‚ÇΩ", "–û–ø–ª–∞—Ç–∏—Ç—å 500‚ÇΩ"]:
        amount = 100 if text == "–û–ø–ª–∞—Ç–∏—Ç—å 100‚ÇΩ" else 500
        await application.bot.send_message(
            chat_id=user_id,
            text=f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É {amount}‚ÇΩ —á–µ—Ä–µ–∑ –ÆKassa: https://yookassa.ru/payments-test?amount={amount}"
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
        await application.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({first_name})\nID: {user_id}\n–°—É–º–º–∞: {amount}‚ÇΩ\n–¢–µ–ª–µ—Ñ–æ–Ω: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ --------------------
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT | filters.CONTACT, handle_message))

# -------------------- Webhook --------------------
@app.post("/webhook/{token}")
async def telegram_webhook(token: str, request: Request):
    if token != TELEGRAM_TOKEN:
        return {"ok": False, "error": "Invalid token"}
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return {"ok": True}

# -------------------- Healthcheck --------------------
@app.get("/health")
async def health():
    return {"status": "ok"}
