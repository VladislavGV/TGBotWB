import os
from fastapi import FastAPI, Request
from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
)
from telegram.constants import ParseMode
import logging

# ----------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------------
BOT_TOKEN = "8286347628:AAGn1jX3jB-gnVESPRZlmEeoWg9IFhRnw6M"
ADMIN_CHAT_ID = 1082958705
YOO_KASSA_TOKEN = "test_a-AT5Q8y-jV4fkRKCOYJLXkeKeg-wJzs0L-oN7udAzo"
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(level=logging.INFO)

# ----------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ -----------------------
app_bot = ApplicationBuilder().token(BOT_TOKEN).build()
app = FastAPI()

# ----------------------- –ö–æ–º–∞–Ω–¥—ã -----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã, –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º
    keyboard = [
        [InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∏—Ç—å 100‚ÇΩ", callback_data="pay_100")],
        [InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∏—Ç—å 500‚ÇΩ", callback_data="pay_500")],
        [KeyboardButton("üìû –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        [InlineKeyboardButton("‚úâ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_admin")]
    ]

    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton("üìû –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True
    )

    inline_markup = InlineKeyboardMarkup(keyboard[:3] + [keyboard[3]])

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=inline_markup
    )

# ----------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ -----------------------
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user

    if query.data == "contact_admin":
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} @{user.username} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        await query.edit_message_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç —Å –≤–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏!")
    
    elif query.data.startswith("pay_"):
        amount = int(query.data.split("_")[1])
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É {amount}‚ÇΩ. –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –õ–°!")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ÆKassa (–ø—Ä–∏–º–µ—Ä)
        payment_url = f"https://yoomoney.ru/pay?receiver={YOO_KASSA_TOKEN}&sum={amount}"
        await context.bot.send_message(chat_id=user.id, text=f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_url}")

# ----------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ -----------------------
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user = update.message.from_user

    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=(
            f"–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:\n"
            f"–ò–º—è: {user.first_name}\n"
            f"Telegram ID: {user.id}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone_number}"
        )
    )

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# ----------------------- Webhook -----------------------
@app.post("/webhook/{token}")
async def webhook(request: Request, token: str):
    if token != BOT_TOKEN:
        return {"ok": False, "error": "Invalid token"}
    
    data = await request.json()
    update = Update.de_json(data, app_bot.bot)
    await app_bot.update_queue.put(update)
    return {"ok": True}

# ----------------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ -----------------------
app_bot.add_handler(CommandHandler("start", start))
app_bot.add_handler(CallbackQueryHandler(button_handler))
app_bot.add_handler(MessageHandler(filters.CONTACT, contact_handler))

# ----------------------- –ó–∞–ø—É—Å–∫ Uvicorn -----------------------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=PORT)
