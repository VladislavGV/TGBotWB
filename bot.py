import logging
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from bot_logic import main_keyboard, handle_buy, handle_support, handle_phone, handle_platform
from uuid import uuid4

TOKEN = "8286347628:AAGn1jX3jB-gnVESPRZlmEeoWg9IFhRnw6M"

logging.basicConfig(level=logging.INFO)

app = FastAPI()
application = ApplicationBuilder().token(TOKEN).build()

# --- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
@app.on_event("startup")
async def on_startup():
    await application.initialize()
    await application.start()

@app.on_event("shutdown")
async def on_shutdown():
    await application.stop()
    await application.shutdown()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n\n"
        "üéØ –ù–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∑–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ª—é–¥–µ–π.\n"
        "üíº –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö IT-–ø—Ä–æ–±–ª–µ–º –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n"
        "‚Ä¢ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 100 —Ä—É–±.\n"
        "‚Ä¢ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: 500 —Ä—É–±. (–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ 700 —Ä—É–±! üéâ)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )
    await update.message.reply_text(welcome_text, reply_markup=main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.Regex("üí∞ –ö—É–ø–∏—Ç—å 100‚ÇΩ"), lambda u, c: handle_buy(u, c, 100)))
application.add_handler(MessageHandler(filters.Regex("üí∞ –ö—É–ø–∏—Ç—å 500‚ÇΩ"), lambda u, c: handle_buy(u, c, 500)))
application.add_handler(MessageHandler(filters.Regex("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"), handle_support))
application.add_handler(MessageHandler(filters.CONTACT, handle_phone))
application.add_handler(MessageHandler(filters.Regex("iOS|Android"), handle_platform))

# Webhook
@app.post(f"/webhook/{TOKEN}")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}

# Healthcheck
@app.get("/health")
async def health():
    return {"status": "ok"}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n\n"
        "üéØ –ù–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∑–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ª—é–¥–µ–π.\n"
        "üíº –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö IT-–ø—Ä–æ–±–ª–µ–º –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n"
        "‚Ä¢ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 100 —Ä—É–±.\n"
        "‚Ä¢ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: 500 —Ä—É–±. (–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ 700 —Ä—É–±! üéâ)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )
    await update.message.reply_text(welcome_text, reply_markup=main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.Regex("üí∞ –ö—É–ø–∏—Ç—å 100‚ÇΩ"), lambda u, c: handle_buy(u, c, 100)))
application.add_handler(MessageHandler(filters.Regex("üí∞ –ö—É–ø–∏—Ç—å 500‚ÇΩ"), lambda u, c: handle_buy(u, c, 500)))
application.add_handler(MessageHandler(filters.Regex("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"), handle_support))
application.add_handler(MessageHandler(filters.CONTACT, handle_phone))
application.add_handler(MessageHandler(filters.Regex("iOS|Android"), handle_platform))

# FastAPI webhook
@app.post(f"/webhook/{TOKEN}")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}

# Healthcheck –¥–ª—è Render
@app.get("/health")
async def health():
    return {"status": "ok"}
