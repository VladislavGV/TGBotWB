import os
from fastapi import FastAPI, Request
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import requests

BOT_TOKEN = "8286347628:AAGn1jX3jB-gnVESPRZlmEeoWg9IFhRnw6M"
ADMIN_CHAT_ID = 1082958705
YKASSA_SHOP_ID = "test_a-AT5Q8y-jV4fkRKCOYJLXkeKeg-wJzs0L-oN7udAzo"
YKASSA_SECRET_KEY = "test_secret_key"  # –ï—Å–ª–∏ –µ—Å—Ç—å, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å

app = FastAPI()

# Telegram application
application = ApplicationBuilder().token(BOT_TOKEN).build()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 100‚ÇΩ"), KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 500‚ÇΩ")],
        [KeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        [KeyboardButton("–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")]
    ],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n\n"
        "üéØ –ù–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∑–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ª—é–¥–µ–π.\n"
        "üíº –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö IT-–ø—Ä–æ–±–ª–µ–º –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n"
        "‚Ä¢ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 100 —Ä—É–±.\n"
        "‚Ä¢ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: 500 —Ä—É–±. (–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ 700 —Ä—É–±! üéâ)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )
    await update.message.reply_text(welcome_text, reply_markup=keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    user_name = update.message.from_user.full_name
    phone = update.message.contact.phone_number if update.message.contact else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    if text in ["–û–ø–ª–∞—Ç–∏—Ç—å 100‚ÇΩ", "–û–ø–ª–∞—Ç–∏—Ç—å 500‚ÇΩ"]:
        amount = 10000 if text == "–û–ø–ª–∞—Ç–∏—Ç—å 100‚ÇΩ" else 50000  # –∫–æ–ø–µ–π–∫–∏
        payment = create_ykassa_payment(amount, f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è {text}")
        await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {payment}")
        notify_admin(user_id, user_name, phone, amount/100)
    elif text == "–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.")
    elif text == "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        await update.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: t.me/YourAdminUsername")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=keyboard)

def create_ykassa_payment(amount, description):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –ÆKassa (—Ç–µ—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
    """
    url = "https://payment.yookassa.ru/create_payment_link"
    payload = {
        "shopId": YKASSA_SHOP_ID,
        "amount": {"value": str(amount/100), "currency": "RUB"},
        "description": description,
        "test": True
    }
    # –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    headers = {"Authorization": f"Bearer {YKASSA_SECRET_KEY}"}
    # –î–ª—è —Ç–µ—Å—Ç–∞ –≤–µ—Ä–Ω—ë–º –∏–º–∏—Ç–∞—Ü–∏—é —Å—Å—ã–ª–∫–∏
    return f"https://yookassa_test_payment_link.com/pay?amount={amount/100}"

def notify_admin(user_id, user_name, phone, amount):
    text = f"–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n\nID: {user_id}\n–ò–º—è: {user_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–°—É–º–º–∞: {amount} ‚ÇΩ"
    requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage", data={
        "chat_id": ADMIN_CHAT_ID,
        "text": text
    })

# –†–æ—É—Ç –¥–ª—è Telegram Webhook
@app.post(f"/webhook/{BOT_TOKEN}")
async def telegram_webhook(request: Request):
    body = await request.json()
    update = Update.de_json(body, application.bot)
    await application.update_queue.put(update)
    return {"ok": True}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ Render
@app.on_event("startup")
async def on_startup():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    import asyncio
    asyncio.create_task(application.initialize())
