import logging
import json
import base64
from aiohttp import web, ClientSession
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Dispatcher, CallbackContext

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "8286347628:AAGn1jX3jB-gnVESPRZlmEeoWg9IFhRnw6M"
ADMIN_CHAT_ID = 1082958705
YUKASSA_SHOP_ID = "test_a-AT5Q8y-jV4fkRKCOYJLXkeKeg-wJzs0L-oN7udAzo"
YUKASSA_TOKEN = "test_a-AT5Q8y-jV4fkRKCOYJLXkeKeg-wJzs0L-oN7udAzo"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
keyboard = [
    [KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 100‚ÇΩ"), KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 500‚ÇΩ")],
    [KeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
    [KeyboardButton("–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π ---
pending_payments = {}

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
async def start(update: Update, context: CallbackContext = None):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n\n"
        "üéØ –ù–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∑–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ª—é–¥–µ–π.\n"
        "üíº –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö IT-–ø—Ä–æ–±–ª–µ–º –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:\n"
        "‚Ä¢ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: 100 —Ä—É–±.\n"
        "‚Ä¢ 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: 500 —Ä—É–±. (–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ 700 —Ä—É–±! üéâ)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    )
    await bot.send_message(chat_id=update.message.chat_id, text=welcome_text, reply_markup=reply_markup)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa ---
async def create_yukassa_payment(user_id: int, amount: int, username: str):
    url = "https://api.yookassa.ru/v3/payments"
    headers = {
        "Authorization": f"Basic {base64.b64encode(f'{YUKASSA_SHOP_ID}:{YUKASSA_TOKEN}'.encode()).decode()}",
        "Content-Type": "application/json"
    }
    data = {
        "amount": {"value": str(amount), "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": "https://tgbotwb.onrender.com"},
        "capture": True,
        "description": f"–û–ø–ª–∞—Ç–∞ {amount}‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username} ({user_id})"
    }
    async with ClientSession() as session:
        async with session.post(url, headers=headers, data=json.dumps(data)) as resp:
            result = await resp.json()
            pending_payments[result["id"]] = {"user_id": user_id, "username": username, "amount": amount}
            return result.get("confirmation", {}).get("confirmation_url")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def handle_message(update, context=None):
    text = update.message.text
    user_id = update.message.from_user.id
    username = update.message.from_user.full_name
    contact = update.message.contact.phone_number if update.message.contact else None

    if text == "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        await bot.send_message(chat_id=user_id, text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.")
        await bot.send_message(chat_id=ADMIN_CHAT_ID,
                               text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    elif text in ["–û–ø–ª–∞—Ç–∏—Ç—å 100‚ÇΩ", "–û–ø–ª–∞—Ç–∏—Ç—å 500‚ÇΩ"]:
        amount = 100 if "100" in text else 500
        payment_url = await create_yukassa_payment(user_id, amount, username)
        if payment_url:
            await bot.send_message(chat_id=user_id, text=f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}")
        else:
            await bot.send_message(chat_id=user_id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif update.message.contact:
        await bot.send_message(chat_id=user_id, text=f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {contact} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

# --- Webhook Telegram ---
async def handle_telegram_webhook(request):
    data = await request.json()
    update = Update.de_json(data, bot)
    await handle_message(update)
    return web.Response(text="ok")

# --- Webhook –ÆKassa ---
async def handle_yukassa_webhook(request):
    data = await request.json()
    payment_id = data.get("object", {}).get("id")
    status = data.get("object", {}).get("status")

    if status == "succeeded" and payment_id in pending_payments:
        info = pending_payments.pop(payment_id)
        await bot.send_message(chat_id=ADMIN_CHAT_ID,
                               text=f"–ù–æ–≤–∞—è —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!\n"
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {info['username']}\n"
                                    f"ID: {info['user_id']}\n"
                                    f"–°—É–º–º–∞: {info['amount']}‚ÇΩ")
    return web.Response(text="ok")

# --- ASGI app ---
app = web.Application()
app.router.add_post(f"/webhook/{TOKEN}", handle_telegram_webhook)
app.router.add_post("/yukassa-webhook", handle_yukassa_webhook)
