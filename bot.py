import os
import logging
from fastapi import FastAPI, Request
from telegram import (
    Update, LabeledPrice, KeyboardButton,
    ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, PreCheckoutQueryHandler, filters
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = "8286347628:AAGn1jX3jB-gnVESPRZlmEeoWg9IFhRnw6M"
YKASSA_TOKEN = "test_a-AT5Q8y-jV4fkRKCOYJLXkeKeg-wJzs0L-oN7udAzo"
ADMIN_CHAT_ID = 1082958705
PORT = int(os.environ.get("PORT", 8000))

# --- Conversation states ---
SELECTING_ACTION, GETTING_PHONE, GETTING_PLATFORM = range(3)

# --- FastAPI ---
app = FastAPI()

# --- –ë–æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [KeyboardButton("–ö—É–ø–∏—Ç—å 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"), KeyboardButton("–ö—É–ø–∏—Ç—å 12 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π")],
        [KeyboardButton("–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=f"https://t.me/{ADMIN_CHAT_ID}")]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
    return SELECTING_ACTION

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        await update.message.reply_text(f"–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: https://t.me/{ADMIN_CHAT_ID}")
        return ConversationHandler.END

    context.user_data['consultation_type'] = text
    context.user_data['price'] = 100 if text == "–ö—É–ø–∏—Ç—å 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" else 500

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard = [[contact_button]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=reply_markup
    )
    return GETTING_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact = update.message.contact
    if contact:
        context.user_data['phone'] = contact.phone_number
    else:
        context.user_data['phone'] = update.message.text  # fallback –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤—Ä—É—á–Ω—É—é

    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (iOS –∏–ª–∏ Android):")
    return GETTING_PLATFORM

async def get_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['platform'] = update.message.text

    prices = [LabeledPrice(label=context.user_data['consultation_type'], amount=context.user_data['price']*100)]

    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title=context.user_data['consultation_type'],
        description=f"{context.user_data['consultation_type']} IT –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
        payload=f"{context.user_data['consultation_type']}|{context.user_data['phone']}|{context.user_data['platform']}",
        provider_token=YKASSA_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="consultation_order"
    )
    return ConversationHandler.END

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.pre_checkout_query:
        await update.pre_checkout_query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment_info = update.message.successful_payment
    payload_parts = payment_info.invoice_payload.split('|')
    await update.message.reply_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
        f"–£—Å–ª—É–≥–∞: {payload_parts[0]}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {payload_parts[1]}\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {payload_parts[2]}\n"
        f"–°—É–º–º–∞: {payment_info.total_amount/100} —Ä—É–±."
    )
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üõé –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–£—Å–ª—É–≥–∞: {payload_parts[0]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {payload_parts[1]}\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {payload_parts[2]}\n–°—É–º–º–∞: {payment_info.total_amount/100} —Ä—É–±.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.effective_user.username}"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Application ---
application = Application.builder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        SELECTING_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_action)],
        GETTING_PHONE: [MessageHandler(filters.CONTACT | (filters.TEXT & ~filters.COMMAND), get_phone)],
        GETTING_PLATFORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_platform)],
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)

application.add_handler(conv_handler)
application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

# --- Webhook endpoint ---
@app.post("/webhook/{token}")
async def webhook(token: str, request: Request):
    if token != TOKEN:
        return {"ok": False, "error": "Unauthorized"}
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.update_queue.put(update)
    return {"ok": True}

# --- Health check ---
@app.get("/health")
async def health():
    return {"status": "ok"}

# --- –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ ---
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=PORT)
