import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from yookassa import Configuration, Payment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa
Configuration.account_id = 'test_a-AT5Q8y-jV4fkRKCOYJLXkeKeg-wJzs0L-oN7udAzo'
Configuration.secret_key = 'test_a-AT5Q8y-jV4fkRKCOYJLXkeKeg-wJzs0L-oN7udAzo'

ADMIN_CHAT_ID = 1082958705

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
platform_kb = ReplyKeyboardMarkup(
    [
        [KeyboardButton("iOS"), KeyboardButton("Android")]
    ],
    one_time_keyboard=True,
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üí∞ –ö—É–ø–∏—Ç—å 100‚ÇΩ"), KeyboardButton("üí∞ –ö—É–ø–∏—Ç—å 500‚ÇΩ")],
            [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def handle_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} ({user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
    await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
async def handle_buy(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: int):
    await update.message.reply_text(
        "–î–ª—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
                                         resize_keyboard=True, one_time_keyboard=True)
    )
    context.user_data['amount'] = amount

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    if contact is None:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        return

    context.user_data['phone'] = contact.phone_number
    context.user_data['user_id'] = contact.user_id if hasattr(contact, 'user_id') else update.effective_user.id
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=platform_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
async def handle_platform(update: Update, context: ContextTypes.DEFAULT_TYPE):
    platform = update.message.text
    context.user_data['platform'] = platform

    amount = context.user_data.get('amount')
    phone = context.user_data.get('phone')
    user_id = context.user_data.get('user_id')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∞–¥–º–∏–Ω–∞
    order_text = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}"
    )
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=order_text)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
    try:
        payment = Payment.create({
            "amount": {"value": str(amount), "currency": "RUB"},
            "confirmation": {"type": "redirect", "return_url": "https://tgbotwb.onrender.com"},
            "capture": True,
            "description": f"–û–ø–ª–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ {amount} —Ä—É–±."
        }, uuid4().hex)

        if 'confirmation' in payment:
            url = payment.confirmation.confirmation_url
            await update.message.reply_text(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {url}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logging.error(payment)
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
        logging.error(e)
